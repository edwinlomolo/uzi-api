// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: session.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  id, ip, user_agent, phone
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, ip, user_agent, phone, created_at, updated_at
`

type CreateSessionParams struct {
	ID        uuid.UUID `json:"id"`
	Ip        string    `json:"ip"`
	UserAgent string    `json:"user_agent"`
	Phone     string    `json:"phone"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.Ip,
		arg.UserAgent,
		arg.Phone,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.UserAgent,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, ip, user_agent, phone, created_at, updated_at FROM sessions
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.UserAgent,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

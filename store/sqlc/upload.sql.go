// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: upload.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCourierUpload = `-- name: CreateCourierUpload :one
INSERT INTO uploads (
  type, uri, courier_id, verification
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, type, uri, verification, courier_id, user_id, created_at, updated_at
`

type CreateCourierUploadParams struct {
	Type         string        `json:"type"`
	Uri          string        `json:"uri"`
	CourierID    uuid.NullUUID `json:"courier_id"`
	Verification string        `json:"verification"`
}

func (q *Queries) CreateCourierUpload(ctx context.Context, arg CreateCourierUploadParams) (Upload, error) {
	row := q.db.QueryRowContext(ctx, createCourierUpload,
		arg.Type,
		arg.Uri,
		arg.CourierID,
		arg.Verification,
	)
	var i Upload
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Uri,
		&i.Verification,
		&i.CourierID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserUpload = `-- name: CreateUserUpload :one
INSERT INTO uploads (
  type, uri, user_id
) VALUES (
  $1, $2, $3
)
RETURNING id, type, uri, verification, courier_id, user_id, created_at, updated_at
`

type CreateUserUploadParams struct {
	Type   string        `json:"type"`
	Uri    string        `json:"uri"`
	UserID uuid.NullUUID `json:"user_id"`
}

func (q *Queries) CreateUserUpload(ctx context.Context, arg CreateUserUploadParams) (Upload, error) {
	row := q.db.QueryRowContext(ctx, createUserUpload, arg.Type, arg.Uri, arg.UserID)
	var i Upload
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Uri,
		&i.Verification,
		&i.CourierID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCourierAvatar = `-- name: GetCourierAvatar :one
SELECT id, uri FROM uploads
WHERE courier_id = $1 AND type = 'DP'
`

type GetCourierAvatarRow struct {
	ID  uuid.UUID `json:"id"`
	Uri string    `json:"uri"`
}

func (q *Queries) GetCourierAvatar(ctx context.Context, courierID uuid.NullUUID) (GetCourierAvatarRow, error) {
	row := q.db.QueryRowContext(ctx, getCourierAvatar, courierID)
	var i GetCourierAvatarRow
	err := row.Scan(&i.ID, &i.Uri)
	return i, err
}

const getCourierUpload = `-- name: GetCourierUpload :one
SELECT id, type, uri, verification, courier_id, user_id, created_at, updated_at FROM
uploads
WHERE courier_id = $1 AND type = $2
LIMIT 1
`

type GetCourierUploadParams struct {
	CourierID uuid.NullUUID `json:"courier_id"`
	Type      string        `json:"type"`
}

func (q *Queries) GetCourierUpload(ctx context.Context, arg GetCourierUploadParams) (Upload, error) {
	row := q.db.QueryRowContext(ctx, getCourierUpload, arg.CourierID, arg.Type)
	var i Upload
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Uri,
		&i.Verification,
		&i.CourierID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCourierUploads = `-- name: GetCourierUploads :many
SELECT id, type, uri, verification, courier_id, user_id, created_at, updated_at FROM uploads
WHERE courier_id = $1
`

func (q *Queries) GetCourierUploads(ctx context.Context, courierID uuid.NullUUID) ([]Upload, error) {
	rows, err := q.db.QueryContext(ctx, getCourierUploads, courierID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Upload{}
	for rows.Next() {
		var i Upload
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Uri,
			&i.Verification,
			&i.CourierID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserUpload = `-- name: GetUserUpload :one
SELECT id, type, uri, verification, courier_id, user_id, created_at, updated_at FROM uploads
WHERE user_id = $1 AND type = $2
LIMIT 1
`

type GetUserUploadParams struct {
	UserID uuid.NullUUID `json:"user_id"`
	Type   string        `json:"type"`
}

func (q *Queries) GetUserUpload(ctx context.Context, arg GetUserUploadParams) (Upload, error) {
	row := q.db.QueryRowContext(ctx, getUserUpload, arg.UserID, arg.Type)
	var i Upload
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Uri,
		&i.Verification,
		&i.CourierID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUpload = `-- name: UpdateUpload :one
UPDATE uploads
SET uri = COALESCE($2, uri), verification = COALESCE($3, verification)
WHERE id = $1
RETURNING id, type, uri, verification, courier_id, user_id, created_at, updated_at
`

type UpdateUploadParams struct {
	ID           uuid.UUID      `json:"id"`
	Uri          sql.NullString `json:"uri"`
	Verification sql.NullString `json:"verification"`
}

func (q *Queries) UpdateUpload(ctx context.Context, arg UpdateUploadParams) (Upload, error) {
	row := q.db.QueryRowContext(ctx, updateUpload, arg.ID, arg.Uri, arg.Verification)
	var i Upload
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Uri,
		&i.Verification,
		&i.CourierID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

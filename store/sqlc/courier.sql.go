// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: courier.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCourier = `-- name: CreateCourier :one
INSERT INTO couriers (
  user_id
) VALUES (
  $1
)
RETURNING id, verified, status, location, ratings, points, user_id, product_id, trip_id, created_at, updated_at
`

func (q *Queries) CreateCourier(ctx context.Context, userID uuid.NullUUID) (Courier, error) {
	row := q.db.QueryRowContext(ctx, createCourier, userID)
	var i Courier
	err := row.Scan(
		&i.ID,
		&i.Verified,
		&i.Status,
		&i.Location,
		&i.Ratings,
		&i.Points,
		&i.UserID,
		&i.ProductID,
		&i.TripID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCourierByID = `-- name: GetCourierByID :one
SELECT id, trip_id, user_id, ST_AsGeoJSON(location) AS location FROM
couriers
WHERE id = $1
LIMIT 1
`

type GetCourierByIDRow struct {
	ID       uuid.UUID     `json:"id"`
	TripID   uuid.NullUUID `json:"trip_id"`
	UserID   uuid.NullUUID `json:"user_id"`
	Location interface{}   `json:"location"`
}

func (q *Queries) GetCourierByID(ctx context.Context, id uuid.UUID) (GetCourierByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCourierByID, id)
	var i GetCourierByIDRow
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.UserID,
		&i.Location,
	)
	return i, err
}

const getCourierByUserID = `-- name: GetCourierByUserID :one
SELECT id, user_id, ST_AsGeoJSON(location) AS location FROM
couriers
WHERE user_id = $1
LIMIT 1
`

type GetCourierByUserIDRow struct {
	ID       uuid.UUID     `json:"id"`
	UserID   uuid.NullUUID `json:"user_id"`
	Location interface{}   `json:"location"`
}

func (q *Queries) GetCourierByUserID(ctx context.Context, userID uuid.NullUUID) (GetCourierByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCourierByUserID, userID)
	var i GetCourierByUserIDRow
	err := row.Scan(&i.ID, &i.UserID, &i.Location)
	return i, err
}

const getCourierProductByID = `-- name: GetCourierProductByID :one
SELECT id, icon, name FROM products
WHERE id = $1
LIMIT 1
`

type GetCourierProductByIDRow struct {
	ID   uuid.UUID `json:"id"`
	Icon string    `json:"icon"`
	Name string    `json:"name"`
}

func (q *Queries) GetCourierProductByID(ctx context.Context, id uuid.UUID) (GetCourierProductByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCourierProductByID, id)
	var i GetCourierProductByIDRow
	err := row.Scan(&i.ID, &i.Icon, &i.Name)
	return i, err
}

const getCourierStatus = `-- name: GetCourierStatus :one
SELECT status FROM
couriers
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetCourierStatus(ctx context.Context, userID uuid.NullUUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getCourierStatus, userID)
	var status string
	err := row.Scan(&status)
	return status, err
}

const isCourier = `-- name: IsCourier :one
SELECT verified FROM
couriers
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) IsCourier(ctx context.Context, userID uuid.NullUUID) (sql.NullBool, error) {
	row := q.db.QueryRowContext(ctx, isCourier, userID)
	var verified sql.NullBool
	err := row.Scan(&verified)
	return verified, err
}

const setCourierStatus = `-- name: SetCourierStatus :one
UPDATE couriers
SET status = $1
WHERE user_id = $2
RETURNING id, verified, status, location, ratings, points, user_id, product_id, trip_id, created_at, updated_at
`

type SetCourierStatusParams struct {
	Status string        `json:"status"`
	UserID uuid.NullUUID `json:"user_id"`
}

func (q *Queries) SetCourierStatus(ctx context.Context, arg SetCourierStatusParams) (Courier, error) {
	row := q.db.QueryRowContext(ctx, setCourierStatus, arg.Status, arg.UserID)
	var i Courier
	err := row.Scan(
		&i.ID,
		&i.Verified,
		&i.Status,
		&i.Location,
		&i.Ratings,
		&i.Points,
		&i.UserID,
		&i.ProductID,
		&i.TripID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const trackCourierLocation = `-- name: TrackCourierLocation :one
UPDATE couriers
SET location = $2
WHERE user_id = $1
RETURNING id, verified, status, location, ratings, points, user_id, product_id, trip_id, created_at, updated_at
`

type TrackCourierLocationParams struct {
	UserID   uuid.NullUUID `json:"user_id"`
	Location interface{}   `json:"location"`
}

func (q *Queries) TrackCourierLocation(ctx context.Context, arg TrackCourierLocationParams) (Courier, error) {
	row := q.db.QueryRowContext(ctx, trackCourierLocation, arg.UserID, arg.Location)
	var i Courier
	err := row.Scan(
		&i.ID,
		&i.Verified,
		&i.Status,
		&i.Location,
		&i.Ratings,
		&i.Points,
		&i.UserID,
		&i.ProductID,
		&i.TripID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

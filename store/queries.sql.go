// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  ip, token, user_id, expires
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, ip, token, expires, user_id, created_at, updated_at
`

type CreateSessionParams struct {
	Ip      pgtype.Inet
	Token   string
	UserID  uuid.NullUUID
	Expires int64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.Ip,
		arg.Token,
		arg.UserID,
		arg.Expires,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.Token,
		&i.Expires,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  first_name, last_name, phone
) VALUES (
  $1, $2, $3
)
RETURNING id, first_name, last_name, phone, created_at, updated_at
`

type CreateUserParams struct {
	FirstName string
	LastName  string
	Phone     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.FirstName, arg.LastName, arg.Phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, ip, token, expires, user_id, created_at, updated_at FROM
sessions
WHERE token = $1
`

func (q *Queries) GetSession(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.Token,
		&i.Expires,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT first_name, last_name, phone, created_at, updated_at
FROM users
`

type GetUserRow struct {
	FirstName string
	LastName  string
	Phone     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetUser(ctx context.Context) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser)
	var i GetUserRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
